import UIKit


// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//두 수의 곱
//문제 설명
//정수 num1, num2가 매개변수 주어집니다. num1과 num2를 곱한 값을 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//0 ≤ num1 ≤ 100
//0 ≤ num2 ≤ 100

//func solution(_ num1:Int, _ num2:Int) -> Int {
//    return num1 * num2
//}
//
//solution(3, 4)
//solution(27, 19)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//몫 구하기
//문제 설명
//정수 num1, num2가 매개변수로 주어질 때, num1을 num2로 나눈 몫을 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//0 < num1 ≤ 100
//0 < num2 ≤ 100

//func solution(_ num1:Int, _ num2:Int) -> Int { num1 / num2 }
//
//solution(10, 5)
//solution(7, 2)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//두 수의 합
//문제 설명
//정수 num1과 num2가 주어질 때, num1과 num2의 합을 return하도록 soltuion 함수를 완성해주세요.
//
//제한사항
//-50,000 ≤ num1 ≤ 50,000
//-50,000 ≤ num2 ≤ 50,000

//func solution(_ num1:Int, _ num2:Int) -> Int {
//    num1 + num2
//}
//
//solution(2, 3)
//solution(100, 2)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//나이 출력
//문제 설명
//머쓱이는 40살인 선생님이 몇 년도에 태어났는지 궁금해졌습니다. 나이 age가 주어질 때, 2022년을 기준 출생 연도를 return 하는 solution 함수를 완성해주세요.
//
//제한사항
//0 < age ≤ 120
//나이는 태어난 연도에 1살이며 1년마다 1씩 증가합니다.

//func solution(_ age:Int) -> Int {
//    guard age > 0, age <= 120 else { return 0 }
//    return 2023 - age
//}
//
//solution(40)
//solution(23)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//숫자 비교하기
//문제 설명
//정수 num1과 num2가 매개변수로 주어집니다. 두 수가 같으면 1 다르면 -1을 retrun하도록 solution 함수를 완성해주세요.
//
//제한사항
//0 ≤ num1 ≤ 10,000
//0 ≤ num2 ≤ 10,000

//func solution(_ num1:Int, _ num2:Int) -> Int {
//    return num1 == num2 ? 1 : -1
//}
//
//solution(2, 3)
//solution(11, 11)
//solution(7, 99)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//나머지 구하기
//문제 설명
//정수 num1, num2가 매개변수로 주어질 때, num1를 num2로 나눈 나머지를 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//0 < num1 ≤ 100
//0 < num2 ≤ 100

//func solution(_ num1:Int, _ num2:Int) -> Int {
//    guard num1 <= 100 && num1 >= 0,
//          num2 <= 100 && num2 >= 0 else { return 0 }
//    return num1 % num2
//}
//
//solution(3, 2)
//solution(10, 5)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//두 수의 차
//문제 설명
//정수 num1과 num2가 주어질 때, num1에서 num2를 뺀 값을 return하도록 soltuion 함수를 완성해주세요.
//
//제한사항
//-50000 ≤ num1 ≤ 50000
//-50000 ≤ num2 ≤ 50000

//func solution(_ num1:Int, _ num2:Int) -> Int {
//    return num1 - num2
//}
//
//solution(2, 3)
//solution(100, 2)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//짝수와 홀수
//문제 설명
//정수 num이 짝수일 경우 "Even"을 반환하고 홀수인 경우 "Odd"를 반환하는 함수, solution을 완성해주세요.
//
//제한 조건
//num은 int 범위의 정수입니다.
//0은 짝수입니다.

//func solution(_ num:Int) -> String {
//    num % 2 == 0 ? "Even": "Odd"
//}
//
//solution(3)
//solution(4)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//짝수는 싫어요
//문제 설명
//정수 n이 매개변수로 주어질 때, n 이하의 홀수가 오름차순으로 담긴 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ n ≤ 100

//func solution(_ n:Int) -> [Int] {
//    var tempArr: [Int] = []
//    for i in (0...n) {
//        if i % 2 != 0 {
//            tempArr.append(i)
//        }
//    }
//    return tempArr
//}
//
//solution(10)
//solution(15)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//배열 두배 만들기
//문제 설명
//정수 배열 numbers가 매개변수로 주어집니다. numbers의 각 원소에 두배한 원소를 가진 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//-10,000 ≤ numbers의 원소 ≤ 10,000
//1 ≤ numbers의 길이 ≤ 1,000

//func solution(_ numbers:[Int]) -> [Int] {
//    numbers.map { $0 * 2 }
//}
//
//solution([1, 2, 3, 4, 5])
//solution([1, 2, 100, -99, 1, 2, 3])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//중앙값 구하기
//문제 설명
//중앙값은 어떤 주어진 값들을 크기의 순서대로 정렬했을 때 가장 중앙에 위치하는 값을 의미합니다. 예를 들어 1, 2, 7, 10, 11의 중앙값은 7입니다. 정수 배열 array가 매개변수로 주어질 때, 중앙값을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//array의 길이는 홀수입니다.
//0 < array의 길이 < 100
//-1,000 < array의 원소 < 1,000

//func solution(_ array:[Int]) -> Int {
//    array.sorted()[((array.count) / 2)]
//}
//
//solution([1, 2, 7, 10, 11])
//solution([9, -1, 0])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//문자열 계산하기
//문제 설명
//my_string은 "3 + 5"처럼 문자열로 된 수식입니다. 문자열 my_string이 매개변수로 주어질 때, 수식을 계산한 값을 return 하는 solution 함수를 완성해주세요.
//
//제한사항
//연산자는 +, -만 존재합니다.
//문자열의 시작과 끝에는 공백이 없습니다.
//0으로 시작하는 숫자는 주어지지 않습니다.
//잘못된 수식은 주어지지 않습니다.
//5 ≤ my_string의 길이 ≤ 100
//my_string을 계산한 결과값은 1 이상 100,000 이하입니다.
//my_string의 중간 계산 값은 -100,000 이상 100,000 이하입니다.
//계산에 사용하는 숫자는 1 이상 20,000 이하인 자연수입니다.
//my_string에는 연산자가 적어도 하나 포함되어 있습니다.
//return type 은 정수형입니다.
//my_string의 숫자와 연산자는 공백 하나로 구분되어 있습니다.

//func solution(_ my_string:String) -> Int {
//    my_string
//        .replacingOccurrences(of: " - ", with: " + -")
//        .components(separatedBy: " + ")
//        .reduce(0,  { $0 + Int($1)! })
//}
//
//solution("3 + 4")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//숨어있는 숫자의 덧셈 (2)
//문제 설명
//문자열 my_string이 매개변수로 주어집니다. my_string은 소문자, 대문자, 자연수로만 구성되어있습니다. my_string안의 자연수들의 합을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ my_string의 길이 ≤ 1,000
//1 ≤ my_string 안의 자연수 ≤ 1000
//연속된 수는 하나의 숫자로 간주합니다.
//000123과 같이 0이 선행하는 경우는 없습니다.

//func solution(_ my_string:String) -> Int {
//    my_string
//        .replacingOccurrences(of: "[a-z,A-Z]", with: " ", options: .regularExpression)
//        .replacingOccurrences(of: #"\ {1,}"#, with: "+", options: .regularExpression)
//        .split(separator: "+")
//        .reduce(0) { $0 + Int(String($1))! }
//}
//
//solution("aAb1B2cC34oOp")
//solution("1a2b3c4d123Z")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//최빈값 구하기
//문제 설명
//최빈값은 주어진 값 중에서 가장 자주 나오는 값을 의미합니다. 정수 배열 array가 매개변수로 주어질 때, 최빈값을 return 하도록 solution 함수를 완성해보세요. 최빈값이 여러 개면 -1을 return 합니다.
//
//제한사항
//0 < array의 길이 < 100
//-1000 < array의 원소 < 1000

//func solution(_ array:[Int]) -> Int {
//    guard array.count > 1 else { return 1 }
//    var tempDic: [Int: Int] = [:]
//
//    array.forEach {
//        let value = tempDic[$0]
//        tempDic.updateValue((value ?? 0) + 1, forKey: $0)
//    }
//
//    let sortedValues = tempDic.sorted { $0.value > $1.value }
//    return sortedValues[0].value == sortedValues[1].value ? -1: sortedValues[0].key
//}
//
//solution([1, 2, 3, 3, 3, 4])
//solution([1, 1, 2, 2])
//solution([1])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//로그인 성공?
//문제 설명
//머쓱이는 프로그래머스에 로그인하려고 합니다. 머쓱이가 입력한 아이디와 패스워드가 담긴 배열 id_pw와 회원들의 정보가 담긴 2차원 배열 db가 주어질 때, 다음과 같이 로그인 성공, 실패에 따른 메시지를 return하도록 solution 함수를 완성해주세요.
//
//아이디와 비밀번호가 모두 일치하는 회원정보가 있으면 "login"을 return합니다.
//로그인이 실패했을 때 아이디가 일치하는 회원이 없다면 “fail”를, 아이디는 일치하지만 비밀번호가 일치하는 회원이 없다면 “wrong pw”를 return 합니다.
//제한사항
//회원들의 아이디는 문자열입니다.
//회원들의 아이디는 알파벳 소문자와 숫자로만 이루어져 있습니다.
//회원들의 패스워드는 숫자로 구성된 문자열입니다.
//회원들의 비밀번호는 같을 수 있지만 아이디는 같을 수 없습니다.
//id_pw의 길이는 2입니다.
//id_pw와 db의 원소는 [아이디, 패스워드] 형태입니다.
//1 ≤ 아이디의 길이 ≤ 15
//1 ≤ 비밀번호의 길이 ≤ 6
//1 ≤ db의 길이 ≤ 10
//db의 원소의 길이는 2입니다.

//func solution(_ id_pw:[String], _ db:[[String]]) -> String {
//    var result = "fail"
//    db.forEach {
//        switch $0 {
//        case id_pw:
//            result = "login"
//        case _ where id_pw.first == $0.first && id_pw.last != $0.last:
//            result = "wrong pw"
//        default: break
//        }
//    }
//    return result
//}
//
//solution(["meosseugi", "1234"], [["rardss", "123"], ["yyoom", "1234"], ["meosseugi", "1234"]])
//solution(["programmer01", "15789"], [["programmer02", "111111"], ["programmer00", "134"], ["programmer01", "1145"]])
//solution(["rabbit04", "98761"], [["jaja11", "98761"], ["krong0313", "29440"], ["rabbit00", "111333"]])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//분수의 덧셈
//문제 설명
//첫 번째 분수의 분자와 분모를 뜻하는 denum1, num1, 두 번째 분수의 분자와 분모를 뜻하는 denum2, num2가 매개변수로 주어집니다. 두 분수를 더한 값을 기약 분수로 나타냈을 때 분자와 분모를 순서대로 담은 배열을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 <denum1, num1, denum2, num2 < 1,000
//func solution(_ denum1:Int, _ num1:Int, _ denum2:Int, _ num2:Int) -> [Int] {
//let sumDenum = denum1 * num2 + denum2 * num1,
//        sumNum = num1 * num2
//
//    for i in (1 ... min(sumDenum, sumNum)).reversed() {
//        if sumDenum % i == 0 && sumNum % i == 0 {
//            return [sumDenum / i, sumNum / i]
//        }
//    }
//    return [sumDenum, sumNum]
//}
//
//solution(1, 2, 3, 4)
//solution(9, 2, 1, 3)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//다항식 더하기
//문제 설명
//한 개 이상의 항의 합으로 이루어진 식을 다항식이라고 합니다. 다항식을 계산할 때는 동류항끼리 계산해 정리합니다. 덧셈으로 이루어진 다항식 polynomial이 매개변수로 주어질 때, 동류항끼리 더한 결괏값을 문자열로 return 하도록 solution 함수를 완성해보세요. 같은 식이라면 가장 짧은 수식을 return 합니다.
//
//제한사항
//0 < polynomial에 있는 수 < 100
//
//polynomial에 변수는 'x'만 존재합니다.
//
//polynomial은 0부터 9까지의 정수, 공백, ‘x’, ‘+'로 이루어져 있습니다.
//
//항과 연산기호 사이에는 항상 공백이 존재합니다.
//
//공백은 연속되지 않으며 시작이나 끝에는 공백이 없습니다.
//
//하나의 항에서 변수가 숫자 앞에 오는 경우는 없습니다.
//
//" + 3xx + + x7 + "와 같은 잘못된 입력은 주어지지 않습니다.
//
//"012x + 001"처럼 0을 제외하고는 0으로 시작하는 수는 없습니다.
//
//문자와 숫자 사이의 곱하기는 생략합니다.
//
//polynomial에는 일차 항과 상수항만 존재합니다.
//
//계수 1은 생략합니다.
//
//결괏값에 상수항은 마지막에 둡니다.
//
//0 < polynomial의 길이 < 50
//func solution(_ polynomial:String) -> String {
//    let test = polynomial.components(separatedBy: " + ")
//    var hasX: Int = 0
//    var hasNot: Int = 0
//    
//    test.forEach {
//        if $0.hasSuffix("x") {
//            hasX += Int($0.dropLast(1)) ?? 1
//        } else {
//            hasNot += Int($0)!
//        }
//    }
//    
//    switch (hasX, hasNot) {
//    case (0, _):
//        return "\(hasNot)"
//    case (1, 0):
//        return "x"
//    case (1, _):
//        return "x + \(hasNot)"
//    case (_, 0):
//        return "\(hasX)x"
//    default:
//        return "\(hasX)x + \(hasNot)"
//    }
//}
//
//solution("3x + 7 + x")
//solution("x + x + x")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
