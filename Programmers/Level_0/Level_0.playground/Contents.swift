import UIKit


// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//두 수의 곱
//문제 설명
//정수 num1, num2가 매개변수 주어집니다. num1과 num2를 곱한 값을 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//0 ≤ num1 ≤ 100
//0 ≤ num2 ≤ 100

//func solution(_ num1:Int, _ num2:Int) -> Int {
//    return num1 * num2
//}
//
//solution(3, 4)
//solution(27, 19)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//몫 구하기
//문제 설명
//정수 num1, num2가 매개변수로 주어질 때, num1을 num2로 나눈 몫을 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//0 < num1 ≤ 100
//0 < num2 ≤ 100

//func solution(_ num1:Int, _ num2:Int) -> Int { num1 / num2 }
//
//solution(10, 5)
//solution(7, 2)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//두 수의 합
//문제 설명
//정수 num1과 num2가 주어질 때, num1과 num2의 합을 return하도록 soltuion 함수를 완성해주세요.
//
//제한사항
//-50,000 ≤ num1 ≤ 50,000
//-50,000 ≤ num2 ≤ 50,000

//func solution(_ num1:Int, _ num2:Int) -> Int {
//    num1 + num2
//}
//
//solution(2, 3)
//solution(100, 2)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//나이 출력
//문제 설명
//머쓱이는 40살인 선생님이 몇 년도에 태어났는지 궁금해졌습니다. 나이 age가 주어질 때, 2022년을 기준 출생 연도를 return 하는 solution 함수를 완성해주세요.
//
//제한사항
//0 < age ≤ 120
//나이는 태어난 연도에 1살이며 1년마다 1씩 증가합니다.

//func solution(_ age:Int) -> Int {
//    guard age > 0, age <= 120 else { return 0 }
//    return 2023 - age
//}
//
//solution(40)
//solution(23)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//숫자 비교하기
//문제 설명
//정수 num1과 num2가 매개변수로 주어집니다. 두 수가 같으면 1 다르면 -1을 retrun하도록 solution 함수를 완성해주세요.
//
//제한사항
//0 ≤ num1 ≤ 10,000
//0 ≤ num2 ≤ 10,000

//func solution(_ num1:Int, _ num2:Int) -> Int {
//    return num1 == num2 ? 1 : -1
//}
//
//solution(2, 3)
//solution(11, 11)
//solution(7, 99)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//나머지 구하기
//문제 설명
//정수 num1, num2가 매개변수로 주어질 때, num1를 num2로 나눈 나머지를 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//0 < num1 ≤ 100
//0 < num2 ≤ 100

//func solution(_ num1:Int, _ num2:Int) -> Int {
//    guard num1 <= 100 && num1 >= 0,
//          num2 <= 100 && num2 >= 0 else { return 0 }
//    return num1 % num2
//}
//
//solution(3, 2)
//solution(10, 5)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//두 수의 차
//문제 설명
//정수 num1과 num2가 주어질 때, num1에서 num2를 뺀 값을 return하도록 soltuion 함수를 완성해주세요.
//
//제한사항
//-50000 ≤ num1 ≤ 50000
//-50000 ≤ num2 ≤ 50000

//func solution(_ num1:Int, _ num2:Int) -> Int {
//    return num1 - num2
//}
//
//solution(2, 3)
//solution(100, 2)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//짝수와 홀수
//문제 설명
//정수 num이 짝수일 경우 "Even"을 반환하고 홀수인 경우 "Odd"를 반환하는 함수, solution을 완성해주세요.
//
//제한 조건
//num은 int 범위의 정수입니다.
//0은 짝수입니다.

//func solution(_ num:Int) -> String {
//    num % 2 == 0 ? "Even": "Odd"
//}
//
//solution(3)
//solution(4)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//짝수는 싫어요
//문제 설명
//정수 n이 매개변수로 주어질 때, n 이하의 홀수가 오름차순으로 담긴 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ n ≤ 100

//func solution(_ n:Int) -> [Int] {
//    var tempArr: [Int] = []
//    for i in (0...n) {
//        if i % 2 != 0 {
//            tempArr.append(i)
//        }
//    }
//    return tempArr
//}
//
//solution(10)
//solution(15)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//배열 두배 만들기
//문제 설명
//정수 배열 numbers가 매개변수로 주어집니다. numbers의 각 원소에 두배한 원소를 가진 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//-10,000 ≤ numbers의 원소 ≤ 10,000
//1 ≤ numbers의 길이 ≤ 1,000

//func solution(_ numbers:[Int]) -> [Int] {
//    numbers.map { $0 * 2 }
//}
//
//solution([1, 2, 3, 4, 5])
//solution([1, 2, 100, -99, 1, 2, 3])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//중앙값 구하기
//문제 설명
//중앙값은 어떤 주어진 값들을 크기의 순서대로 정렬했을 때 가장 중앙에 위치하는 값을 의미합니다. 예를 들어 1, 2, 7, 10, 11의 중앙값은 7입니다. 정수 배열 array가 매개변수로 주어질 때, 중앙값을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//array의 길이는 홀수입니다.
//0 < array의 길이 < 100
//-1,000 < array의 원소 < 1,000

//func solution(_ array:[Int]) -> Int {
//    array.sorted()[((array.count) / 2)]
//}
//
//solution([1, 2, 7, 10, 11])
//solution([9, -1, 0])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//문자열 계산하기
//문제 설명
//my_string은 "3 + 5"처럼 문자열로 된 수식입니다. 문자열 my_string이 매개변수로 주어질 때, 수식을 계산한 값을 return 하는 solution 함수를 완성해주세요.
//
//제한사항
//연산자는 +, -만 존재합니다.
//문자열의 시작과 끝에는 공백이 없습니다.
//0으로 시작하는 숫자는 주어지지 않습니다.
//잘못된 수식은 주어지지 않습니다.
//5 ≤ my_string의 길이 ≤ 100
//my_string을 계산한 결과값은 1 이상 100,000 이하입니다.
//my_string의 중간 계산 값은 -100,000 이상 100,000 이하입니다.
//계산에 사용하는 숫자는 1 이상 20,000 이하인 자연수입니다.
//my_string에는 연산자가 적어도 하나 포함되어 있습니다.
//return type 은 정수형입니다.
//my_string의 숫자와 연산자는 공백 하나로 구분되어 있습니다.

//func solution(_ my_string:String) -> Int {
//    my_string
//        .replacingOccurrences(of: " - ", with: " + -")
//        .components(separatedBy: " + ")
//        .reduce(0,  { $0 + Int($1)! })
//}
//
//solution("3 + 4")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//숨어있는 숫자의 덧셈 (2)
//문제 설명
//문자열 my_string이 매개변수로 주어집니다. my_string은 소문자, 대문자, 자연수로만 구성되어있습니다. my_string안의 자연수들의 합을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ my_string의 길이 ≤ 1,000
//1 ≤ my_string 안의 자연수 ≤ 1000
//연속된 수는 하나의 숫자로 간주합니다.
//000123과 같이 0이 선행하는 경우는 없습니다.

//func solution(_ my_string:String) -> Int {
//    my_string
//        .replacingOccurrences(of: "[a-z,A-Z]", with: " ", options: .regularExpression)
//        .replacingOccurrences(of: #"\ {1,}"#, with: "+", options: .regularExpression)
//        .split(separator: "+")
//        .reduce(0) { $0 + Int(String($1))! }
//}
//
//solution("aAb1B2cC34oOp")
//solution("1a2b3c4d123Z")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//최빈값 구하기
//문제 설명
//최빈값은 주어진 값 중에서 가장 자주 나오는 값을 의미합니다. 정수 배열 array가 매개변수로 주어질 때, 최빈값을 return 하도록 solution 함수를 완성해보세요. 최빈값이 여러 개면 -1을 return 합니다.
//
//제한사항
//0 < array의 길이 < 100
//-1000 < array의 원소 < 1000

//func solution(_ array:[Int]) -> Int {
//    guard array.count > 1 else { return 1 }
//    var tempDic: [Int: Int] = [:]
//
//    array.forEach {
//        let value = tempDic[$0]
//        tempDic.updateValue((value ?? 0) + 1, forKey: $0)
//    }
//
//    let sortedValues = tempDic.sorted { $0.value > $1.value }
//    return sortedValues[0].value == sortedValues[1].value ? -1: sortedValues[0].key
//}
//
//solution([1, 2, 3, 3, 3, 4])
//solution([1, 1, 2, 2])
//solution([1])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//로그인 성공?
//문제 설명
//머쓱이는 프로그래머스에 로그인하려고 합니다. 머쓱이가 입력한 아이디와 패스워드가 담긴 배열 id_pw와 회원들의 정보가 담긴 2차원 배열 db가 주어질 때, 다음과 같이 로그인 성공, 실패에 따른 메시지를 return하도록 solution 함수를 완성해주세요.
//
//아이디와 비밀번호가 모두 일치하는 회원정보가 있으면 "login"을 return합니다.
//로그인이 실패했을 때 아이디가 일치하는 회원이 없다면 “fail”를, 아이디는 일치하지만 비밀번호가 일치하는 회원이 없다면 “wrong pw”를 return 합니다.
//제한사항
//회원들의 아이디는 문자열입니다.
//회원들의 아이디는 알파벳 소문자와 숫자로만 이루어져 있습니다.
//회원들의 패스워드는 숫자로 구성된 문자열입니다.
//회원들의 비밀번호는 같을 수 있지만 아이디는 같을 수 없습니다.
//id_pw의 길이는 2입니다.
//id_pw와 db의 원소는 [아이디, 패스워드] 형태입니다.
//1 ≤ 아이디의 길이 ≤ 15
//1 ≤ 비밀번호의 길이 ≤ 6
//1 ≤ db의 길이 ≤ 10
//db의 원소의 길이는 2입니다.

//func solution(_ id_pw:[String], _ db:[[String]]) -> String {
//    var result = "fail"
//    db.forEach {
//        switch $0 {
//        case id_pw:
//            result = "login"
//        case _ where id_pw.first == $0.first && id_pw.last != $0.last:
//            result = "wrong pw"
//        default: break
//        }
//    }
//    return result
//}
//
//solution(["meosseugi", "1234"], [["rardss", "123"], ["yyoom", "1234"], ["meosseugi", "1234"]])
//solution(["programmer01", "15789"], [["programmer02", "111111"], ["programmer00", "134"], ["programmer01", "1145"]])
//solution(["rabbit04", "98761"], [["jaja11", "98761"], ["krong0313", "29440"], ["rabbit00", "111333"]])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//분수의 덧셈
//문제 설명
//첫 번째 분수의 분자와 분모를 뜻하는 denum1, num1, 두 번째 분수의 분자와 분모를 뜻하는 denum2, num2가 매개변수로 주어집니다. 두 분수를 더한 값을 기약 분수로 나타냈을 때 분자와 분모를 순서대로 담은 배열을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 <denum1, num1, denum2, num2 < 1,000
//func solution(_ denum1:Int, _ num1:Int, _ denum2:Int, _ num2:Int) -> [Int] {
//let sumDenum = denum1 * num2 + denum2 * num1,
//        sumNum = num1 * num2
//
//    for i in (1 ... min(sumDenum, sumNum)).reversed() {
//        if sumDenum % i == 0 && sumNum % i == 0 {
//            return [sumDenum / i, sumNum / i]
//        }
//    }
//    return [sumDenum, sumNum]
//}

//func solution(_ denum1:Int, _ num1:Int, _ denum2:Int, _ num2:Int) -> [Int] {
//    var denominator = denum1 * num2 + denum2 * num1
//    var numerator = num1 * num2
//
//    let maxDiv = min(denominator, numerator)
//    for div in stride(from: maxDiv, to: 1, by: -1) {
//        if denominator % div == 0 && numerator % div == 0 {
//            denominator /= div
//            numerator /= div
//        }
//    }
//
//    return [denominator, numerator]
//}

//solution(1, 2, 3, 4)
//solution(9, 2, 1, 3)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//다항식 더하기
//문제 설명
//한 개 이상의 항의 합으로 이루어진 식을 다항식이라고 합니다. 다항식을 계산할 때는 동류항끼리 계산해 정리합니다. 덧셈으로 이루어진 다항식 polynomial이 매개변수로 주어질 때, 동류항끼리 더한 결괏값을 문자열로 return 하도록 solution 함수를 완성해보세요. 같은 식이라면 가장 짧은 수식을 return 합니다.
//
//제한사항
//0 < polynomial에 있는 수 < 100
//
//polynomial에 변수는 "x"만 존재합니다.
//
//polynomial은 0부터 9까지의 정수, 공백, ‘x’, ‘+"로 이루어져 있습니다.
//
//항과 연산기호 사이에는 항상 공백이 존재합니다.
//
//공백은 연속되지 않으며 시작이나 끝에는 공백이 없습니다.
//
//하나의 항에서 변수가 숫자 앞에 오는 경우는 없습니다.
//
//" + 3xx + + x7 + "와 같은 잘못된 입력은 주어지지 않습니다.
//
//"012x + 001"처럼 0을 제외하고는 0으로 시작하는 수는 없습니다.
//
//문자와 숫자 사이의 곱하기는 생략합니다.
//
//polynomial에는 일차 항과 상수항만 존재합니다.
//
//계수 1은 생략합니다.
//
//결괏값에 상수항은 마지막에 둡니다.
//
//0 < polynomial의 길이 < 50
//func solution(_ polynomial:String) -> String {
//    let test = polynomial.components(separatedBy: " + ")
//    var hasX: Int = 0
//    var hasNot: Int = 0
//
//    test.forEach {
//        if $0.hasSuffix("x") {
//            hasX += Int($0.dropLast(1)) ?? 1
//        } else {
//            hasNot += Int($0)!
//        }
//    }
//
//    switch (hasX, hasNot) {
//    case (0, _):
//        return "\(hasNot)"
//    case (1, 0):
//        return "x"
//    case (1, _):
//        return "x + \(hasNot)"
//    case (_, 0):
//        return "\(hasX)x"
//    default:
//        return "\(hasX)x + \(hasNot)"
//    }
//}
//
//solution("3x + 7 + x")
//solution("x + x + x")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//문자열안에 문자열
//문제 설명
//문자열 str1, str2가 매개변수로 주어집니다. str1 안에 str2가 있다면 1을 없다면 2를 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ str1의 길이 ≤ 100
//1 ≤ str2의 길이 ≤ 100
//func solution(_ str1:String, _ str2:String) -> Int { str1.contains(str2) ? 1 : 2 }
//
//solution("ab6CDE443fgh22iJKlmn1o", "6CD")
//solution("ppprrrogrammers", "pppp")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//각도기
//문제 설명
//각에서 0도 초과 90도 미만은 예각, 90도는 직각, 90도 초과 180도 미만은 둔각 180도는 평각으로 분류합니다. 각 angle이 매개변수로 주어질 때 예각일 때 1, 직각일 때 2, 둔각일 때 3, 평각일 때 4를 return하도록 solution 함수를 완성해주세요.
//
//예각 : 0 < angle < 90
//직각 : angle = 90
//둔각 : 90 < angle < 180
//평각 : angle = 180
//제한사항
//0 < angle ≤ 180
//angle은 정수입니다.
//func solution(_ angle:Int) -> Int {
//    switch angle {
//    case 1...89: return 1
//    case 90: return 2
//    case 90...179: return 3
//    case 180: return 4
//    default: return 0
//    }
//}
//
//solution(70)
//solution(91)
//solution(180)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//배열의 평균값
//문제 설명
//정수 배열 numbers가 매개변수로 주어집니다. numbers의 원소의 평균값을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//0 ≤ numbers의 원소 ≤ 1,000
//1 ≤ numbers의 길이 ≤ 100
//정답의 소수 부분이 .0 또는 .5인 경우만 입력으로 주어집니다.

//func solution(_ numbers:[Int]) -> Double { numbers.reduce(0.0) { $0 + Double($1) } / Double(numbers.count) }
//
//solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
//solution([89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//짝수의 합
//문제 설명
//정수 n이 주어질 때, n이하의 짝수를 모두 더한 값을 return 하도록 solution 함수를 작성해주세요.
//
//제한사항
//0 < n ≤ 1000

//func solution(_ n:Int) -> Int {
//    guard n > 1 else { return 0 }
//    var result: Int = 0
//    for i in 2...n {
//        if i % 2 == 0 {
//            result += i
//        }
//    }
//
//    return result
//}
//
//solution(10)
//solution(4)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//중복된 숫자 개수
//문제 설명
//정수가 담긴 배열 array와 정수 n이 매개변수로 주어질 때, array에 n이 몇 개 있는 지를 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//1 ≤ array의 길이 ≤ 100
//0 ≤ array의 원소 ≤ 1,000
//0 ≤ n ≤ 1,000

//func solution(_ array:[Int], _ n:Int) -> Int {
//    var result = 0
//    array.forEach {
//        if $0 == n {
//            result += 1
//        }
//    }
//    return result
//}
//
//func solution(_ array: [Int], _ n: Int) -> Int { array.filter { $0 == n }.count }
//
//solution([1, 1, 2, 3, 4, 5], 1)
//solution([0, 2, 3, 4], 1)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//배열 자르기
//문제 설명
//정수 배열 numbers와 정수 num1, num2가 매개변수로 주어질 때, numbers의 num1번 째 인덱스부터 num2번째 인덱스까지 자른 정수 배열을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 < numbers의 길이 ≤ 100
//0 ≤ numbers의 원소 ≤ 1,000
//0 <num1 < num2 < numbers의 길이

//func solution(_ numbers:[Int], _ num1:Int, _ num2:Int) -> [Int] {
//    numbers.dropFirst(num1).dropLast(numbers.count - num2 - 1)
//}

//func solution(_ numbers:[Int], _ num1:Int, _ num2:Int) -> [Int] { Array(numbers[num1...num2]) }
//
//solution([1, 2, 3, 4, 5], 1, 3)
//solution([1, 3, 5], 1, 2)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//배열 뒤집기
//문제 설명
//정수가 들어 있는 배열 num_list가 매개변수로 주어집니다. num_list의 원소의 순서를 거꾸로 뒤집은 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ num_list의 길이 ≤ 1,000
//0 ≤ num_list의 원소 ≤ 1,000

//func solution(_ num_list:[Int]) -> [Int] { num_list.reversed() }
//
//solution([1, 2, 3, 4, 5])
//solution([1, 1, 1, 1, 1, 2])
//solution([1, 0, 1, 1, 1, 3, 5])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//문자 반복 출력하기
//문제 설명
//문자열 my_string과 정수 n이 매개변수로 주어질 때, my_string에 들어있는 각 문자를 n만큼 반복한 문자열을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//1 ≤ my_string 길이 ≤ 50
//1 ≤ n ≤ 50
//"my_string"은 영어 대소문자로 이루어져 있습니다.

//func solution(_ my_string:String, _ n:Int) -> String {
//    var result = ""
//    for i in my_string  {
//        for _ in 0..<n {
//            result.append(i)
//        }
//    }
//    return result
//}
//
//solution("hello", 3)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//머쓱이보다 키 큰 사람
//문제 설명
//머쓱이는 학교에서 키 순으로 줄을 설 때 몇 번째로 서야 하는지 궁금해졌습니다. 머쓱이네 반 친구들의 키가 담긴 정수 배열 array와 머쓱이의 키 height가 매개변수로 주어질 때, 머쓱이보다 키 큰 사람 수를 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//1 ≤ array의 길이 ≤ 100
//1 ≤ height ≤ 200
//1 ≤ array의 원소 ≤ 200

//func solution(_ array:[Int], _ height:Int) -> Int { array.filter { $0 > height }.count }
//
//solution([149, 180, 192, 170], 167)
//solution([180, 120, 140], 190)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//짝수 홀수 개수
//문제 설명
//정수가 담긴 리스트 num_list가 주어질 때, num_list의 원소 중 짝수와 홀수의 개수를 담은 배열을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//1 ≤ num_list의 길이 ≤ 100
//0 ≤ num_list의 원소 ≤ 1,000

//func solution(_ num_list:[Int]) -> [Int] {
//    [num_list.filter { $0 % 2 == 0 }.count, num_list.filter { $0 % 2 != 0 }.count]
//}
//
//solution([1, 2, 3, 4, 5])
//solution([1, 3, 5, 7])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//피자 나눠 먹기 (3)
//문제 설명
//머쓱이네 피자가게는 피자를 두 조각에서 열 조각까지 원하는 조각 수로 잘라줍니다. 피자 조각 수 slice와 피자를 먹는 사람의 수 n이 매개변수로 주어질 때, n명의 사람이 최소 한 조각 이상 피자를 먹으려면 최소 몇 판의 피자를 시켜야 하는지를 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//2 ≤ slice ≤ 10
//1 ≤ n ≤ 100

//func solution(_ slice:Int, _ n:Int) -> Int {
//    var result = 0
//    
//    while result * slice / n < 1 {
//        result += 1
//    }
//    
//    return result
//}

//func solution(_ slice: Int, _ n: Int) -> Int { n / slice + (n % slice > 0 ? 1 : 0) }
//
//solution(7, 10)
//solution(4, 12)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//숨어있는 숫자의 덧셈 (1)
//문제 설명
//문자열 my_string이 매개변수로 주어집니다. my_string안의 모든 자연수들의 합을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ my_string의 길이 ≤ 1,000
//my_string은 소문자, 대문자 그리고 한자리 자연수로만 구성되어있습니다.

//func solution(_ my_string:String) -> Int { my_string.reduce(0) { $0 + (Int(String($1)) ?? 0) } }

//solution("aAb1B2cC34oOp")
//solution("1a2b3c4d123")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//문자열 뒤집기
//문제 설명
//문자열 my_string이 매개변수로 주어집니다. my_string을 거꾸로 뒤집은 문자열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ my_string의 길이 ≤ 1,000

//func solution(_ my_string:String) -> String { String(my_string.reversed()) }
//
//solution("jaron")
//solution("bread")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//양꼬치
//문제 설명
//머쓱이네 양꼬치 가게는 10인분을 먹으면 음료수 하나를 서비스로 줍니다. 양꼬치는 1인분에 12,000원, 음료수는 2,000원입니다. 정수 n과 k가 매개변수로 주어졌을 때, 양꼬치 n인분과 음료수 k개를 먹었다면 총얼마를 지불해야 하는지 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 < n < 1,000
//n / 10 ≤ k < 1,000
//서비스로 받은 음료수는 모두 마십니다.

//func solution(_ n:Int, _ k:Int) -> Int { 12000 * n + 2000 * (k - n / 10) }
//
//solution(10, 3)
//solution(64, 6)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//문자열 정렬하기 (2)
//문제 설명
//영어 대소문자로 이루어진 문자열 my_string이 매개변수로 주어질 때, my_string을 모두 소문자로 바꾸고 알파벳 순서대로 정렬한 문자열을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 < my_string 길이 < 100

//func solution(_ my_string:String) -> String { String(my_string.lowercased().sorted()) }
//
//solution("Bcad")
//solution("heLLo")
//solution("Python")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//대문자와 소문자
//문제 설명
//문자열 my_string이 매개변수로 주어질 때, 대문자는 소문자로 소문자는 대문자로 변환한 문자열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ my_string의 길이 ≤ 1,000
//my_string은 영어 대문자와 소문자로만 구성되어 있습니다.

//func solution(_ my_string:String) -> String { my_string.map { $0.isUppercase ? $0.lowercased(): $0.uppercased() }.joined() }
//
//solution("cccCCC")
//solution("abCdEfghIJ")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//삼각형의 완성조건 (1)
//문제 설명
//선분 세 개로 삼각형을 만들기 위해서는 다음과 같은 조건을 만족해야 합니다.
//
//가장 긴 변의 길이는 다른 두 변의 길이의 합보다 작아야 합니다.
//삼각형의 세 변의 길이가 담긴 배열 sides이 매개변수로 주어집니다. 세 변으로 삼각형을 만들 수 있다면 1, 만들 수 없다면 2를 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//sides의 원소는 자연수입니다.
//sides의 길이는 3입니다.
//1 ≤ sides의 원소 ≤ 1,000

//func solution(_ sides:[Int]) -> Int {
//    let sortedArr = sides.sorted(by: >)
//
//    return sortedArr[0] < sortedArr[1] + sortedArr[2] ? 1 : 2
//}
//
//solution([1, 2, 3])
//solution([3, 6, 2])
//solution([199, 72, 222])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//세균 증식
//문제 설명
//어떤 세균은 1시간에 두배만큼 증식한다고 합니다. 처음 세균의 마리수 n과 경과한 시간 t가 매개변수로 주어질 때 t시간 후 세균의 수를 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ n ≤ 10
//1 ≤ t ≤ 15

//func solution(_ n:Int, _ t:Int) -> Int { Int(pow(CGFloat(2), CGFloat(t))) * n }
//
//solution(2, 10)
//solution(7, 15)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//아이스 아메리카노
//문제 설명
//머쓱이는 추운 날에도 아이스 아메리카노만 마십니다. 아이스 아메리카노는 한잔에 5,500원입니다. 머쓱이가 가지고 있는 돈 money가 매개변수로 주어질 때, 머쓱이가 최대로 마실 수 있는 아메리카노의 잔 수와 남는 돈을 순서대로 담은 배열을 return 하도록 solution 함수를 완성해보세요.
//제한사항
//0 < money ≤ 1,000,000

//func solution(_ money:Int) -> [Int] { [money / 5500, money % 5500] }
//
//solution(5500)
//solution(15000)
//solution(400)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//피자 나눠 먹기 (1)
//문제 설명
//머쓱이네 피자가게는 피자를 일곱 조각으로 잘라 줍니다. 피자를 나눠먹을 사람의 수 n이 주어질 때, 모든 사람이 피자를 한 조각 이상 먹기 위해 필요한 피자의 수를 return 하는 solution 함수를 완성해보세요.
//
//제한사항
//1 ≤ n ≤ 100

//func solution(_ n:Int) -> Int { n / 7 + (n % 7 > 0 ? 1: 0) }
//
//solution(7)
//solution(1)
//solution(15)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//제곱수 판별하기
//문제 설명
//어떤 자연수를 제곱했을 때 나오는 정수를 제곱수라고 합니다. 정수 n이 매개변수로 주어질 때, n이 제곱수라면 1을 아니라면 2를 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ n ≤ 1,000,000

//func solution(_ n:Int) -> Int {
//    (sqrtf(Float(n)) * sqrtf(Float(n))) == Float(n) ? 1: 2
//}
//
//solution(144)
//solution(976)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//배열 원소의 길이
//문제 설명
//문자열 배열 strlist가 매개변수로 주어집니다. strlist 각 원소의 길이를 담은 배열을 retrun하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ strlist 원소의 길이 ≤ 100
//strlist는 알파벳 소문자, 대문자, 특수문자로 구성되어 있습니다.

//func solution(_ strlist:[String]) -> [Int] {
//
//    return strlist.map { $0.count }
//}
//
//solution(["We", "are", "the", "world!"])
//solution(["I", "Love", "Programmers."])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//자릿수 더하기
//문제 설명
//정수 n이 매개변수로 주어질 때 n의 각 자리 숫자의 합을 return하도록 solution 함수를 완성해주세요
//
//제한사항
//0 ≤ n ≤ 1,000,000

//func solution(_ n:Int) -> Int { n.description.reduce(0) { $0 + Int(String($1))! } }
//
//solution(1234)
//solution(930211)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//편지
//문제 설명
//머쓱이는 할머니께 생신 축하 편지를 쓰려고 합니다. 할머니가 보시기 편하도록 글자 한 자 한 자를 가로 2cm 크기로 적으려고 하며, 편지를 가로로만 적을 때, 축하 문구 message를 적기 위해 필요한 편지지의 최소 가로길이를 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//공백도 하나의 문자로 취급합니다.
//1 ≤ message의 길이 ≤ 50
//편지지의 여백은 생각하지 않습니다.
//message는 영문 알파벳 대소문자, ‘!’, ‘~’ 또는 공백으로만 이루어져 있습니다.

//func solution(_ message:String) -> Int { message.count * 2 }
//
//solution("happy birthday!")
//solution("I love you~")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//옷가게 할인 받기
//문제 설명
//머쓱이네 옷가게는 10만 원 이상 사면 5%, 30만 원 이상 사면 10%, 50만 원 이상 사면 20%를 할인해줍니다.
//구매한 옷의 가격 price가 주어질 때, 지불해야 할 금액을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 ≤ price ≤ 1,000,000
//소수점 이하를 버린 정수를 return합니다.

//func solution(_ price:Int) -> Int {
//    switch price {
//    case 100000..<300000: return Int(Float(price) * 0.95)
//    case 300000..<500000: return Int(Float(price) * 0.9)
//    case 500000...: return Int(Float(price) * 0.8)
//    default: return price
//    }
//}
//
//solution(150000)
//solution(580000)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//최댓값 만들기 (1)
//문제 설명
//정수 배열 numbers가 매개변수로 주어집니다. numbers의 원소 중 두 개를 곱해 만들 수 있는 최댓값을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//0 ≤ numbers의 원소 ≤ 10,000
//2 ≤ numbers의 길이 ≤ 100

//func solution(_ numbers:[Int]) -> Int {
//    let sortedArr = numbers.sorted(by: >)
//
//    return sortedArr[0] * sortedArr[1]
//}
//
//solution([1, 2, 3, 4, 5])
//solution([0, 31, 24, 10, 1, 9])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//점의 위치 구하기
//문제 설명
//사분면은 한 평면을 x축과 y축을 기준으로 나눈 네 부분입니다. 사분면은 아래와 같이 1부터 4까지 번호를매깁니다.
//스크린샷 2022-07-07 오후 3.27.04 복사본.png
//
//x 좌표와 y 좌표가 모두 양수이면 제1사분면에 속합니다.
//x 좌표가 음수, y 좌표가 양수이면 제2사분면에 속합니다.
//x 좌표와 y 좌표가 모두 음수이면 제3사분면에 속합니다.
//x 좌표가 양수, y 좌표가 음수이면 제4사분면에 속합니다.
//x 좌표 (x, y)를 차례대로 담은 정수 배열 dot이 매개변수로 주어집니다. 좌표 dot이 사분면 중 어디에 속하는지 1, 2, 3, 4 중 하나를 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//dot의 길이 = 2
//dot[0]은 x좌표를, dot[1]은 y좌표를 나타냅니다
//-500 ≤ dot의 원소 ≤ 500
//dot의 원소는 0이 아닙니다.

//func solution(_ dot:[Int]) -> Int {
//    switch (dot[0], dot[1]) {
//    case (0..., 0...): return 1
//    case (...0, 0...): return 2
//    case (...0, ...0): return 3
//    case (0..., ...0): return 4
//    default: return 0
//    }
//}
//
//solution([2, 4])
//solution([-7, 9])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//배열의 유사도
//문제 설명
//두 배열이 얼마나 유사한지 확인해보려고 합니다. 문자열 배열 s1과 s2가 주어질 때 같은 원소의 개수를 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ s1, s2의 길이 ≤ 100
//1 ≤ s1, s2의 원소의 길이 ≤ 10
//s1과 s2의 원소는 알파벳 소문자로만 이루어져 있습니다
//s1과 s2는 각각 중복된 원소를 갖지 않습니다.

//func solution(_ s1:[String], _ s2:[String]) -> Int { Set<String>(s1).intersection(Set<String>(s2)) .count }
//
//solution(["a", "b", "c"], ["com", "b", "d", "p", "c"])
//solution(["n", "omg"], ["m", "dot"])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//약수 구하기
//문제 설명
//정수 n이 매개변수로 주어질 때, n의 약수를 오름차순으로 담은 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ n ≤ 10,000

//func solution(_ n:Int) -> [Int] {
//    var result: [Int] = []
//    for i in (1...n) {
//        if n % i == 0 {
//            result.append(i)
//        }
//    }
//    return result
//}
//
//solution(24)
//solution(29)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//가장 큰 수 찾기
//문제 설명
//정수 배열 array가 매개변수로 주어질 때, 가장 큰 수와 그 수의 인덱스를 담은 배열을 return 하도록 solution 함수를 완성해보세요.

//func solution(_ array:[Int]) -> [Int] { [array.max()!, array.firstIndex(of: array.max()!)!] }
//
//solution([1, 8, 3])
//solution([9, 10, 11, 8])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//짝수는 싫어요
//문제 설명
//정수 n이 매개변수로 주어질 때, n 이하의 홀수가 오름차순으로 담긴 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ n ≤ 100

//func solution(_ n:Int) -> [Int] {
//    var result: [Int] = []
//    for i in (1...n) {
//        if i % 2 == 1 {
//            result.append(i)
//        }
//    }
//    return result
//}
//
//solution(10)
//solution(15)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//문자열 정렬하기 (1)
//문제 설명
//문자열 my_string이 매개변수로 주어질 때, my_string 안에 있는 숫자만 골라 오름차순 정렬한 리스트를 return 하도록 solution 함수를 작성해보세요.
//
//제한사항
//1 ≤ my_string의 길이 ≤ 100
//my_string에는 숫자가 한 개 이상 포함되어 있습니다.
//my_string은 영어 소문자 또는 0부터 9까지의 숫자로 이루어져 있습니다. - - -

//func solution(_ my_string:String) -> [Int] { my_string.filter { Int(String($0)) != nil }.map { Int(String($0))! }.sorted() }

//solution("hi12392")
//solution("p2o4i8gj2")
//solution("abcde0")

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//모음 제거
//영어에선 a, e, i, o, u 다섯 가지 알파벳을 모음으로 분류합니다. 문자열 my_string이 매개변수로 주어질 때 모음을 제거한 문자열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//my_string은 소문자와 공백으로 이루어져 있습니다.
//1 ≤ my_string의 길이 ≤ 1,000

//func solution(_ my_string:String) -> String {
//    let vowels: [String] = ["a", "e", "i", "o", "u"]
//    return my_string.filter { !vowels.contains(String($0)) }
//}
//
//solution("bus")
//solution("nice to meet you")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//배열 두배 만들기
//문제 설명
//정수 배열 numbers가 매개변수로 주어집니다. numbers의 각 원소에 두배한 원소를 가진 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//-10,000 ≤ numbers의 원소 ≤ 10,000
//1 ≤ numbers의 길이 ≤ 1,000

//func solution(_ numbers:[Int]) -> [Int] { numbers.map { $0 * 2 } }
//
//solution([1, 2, 3, 4, 5])
//solution([1, 2, 100, -99, 1, 2, 3])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//특정 문자 제거하기
//문제 설명
//문자열 my_string과 문자 letter이 매개변수로 주어집니다. my_string에서 letter를 제거한 문자열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ my_string의 길이 ≤ 100
//letter은 길이가 1인 영문자입니다.
//my_string과 letter은 알파벳 대소문자로 이루어져 있습니다.
//대문자와 소문자를 구분합니다.

//func solution(_ my_string:String, _ letter:String) -> String { my_string.filter { String($0) != letter } }
//
//solution("abcdef", "f")
//solution("BCBdbe", "B")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//n의 배수 고르기
//문제 설명
//정수 n과 정수 배열 numlist가 매개변수로 주어질 때, numlist에서 n의 배수가 아닌 수들을 제거한 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ n ≤ 10,000
//1 ≤ numlist의 크기 ≤ 100
//1 ≤ numlist의 원소 ≤ 100,000

//func solution(_ n:Int, _ numlist:[Int]) -> [Int] { numlist.filter { $0 % n == 0 } }
//
//solution(3, [4, 5, 6, 7, 8, 9, 10, 11, 12])
//solution(5, [1, 9, 3, 10, 13, 5])
//solution(12, [2, 100, 120, 600, 12, 12])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//인덱스 바꾸기
//문제 설명
//문자열 my_string과 정수 num1, num2가 매개변수로 주어질 때, my_string에서 인덱스 num1과 인덱스 num2에 해당하는 문자를 바꾼 문자열을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//1 < my_string의 길이 < 100
//0 ≤ num1, num2 < my_string의 길이
//my_string은 소문자로 이루어져 있습니다.
//num1 ≠ num2

//func solution(_ my_string:String, _ num1:Int, _ num2:Int) -> String {
//    var tempChar: [Character] = my_string.map { Character(extendedGraphemeClusterLiteral: $0) }
//    let index = tempChar[num1]
//        tempChar[num1] = tempChar[num2]
//        tempChar[num2] = index
//
//    return String(tempChar)
//}
//
//func solution(_ myString: String, _ num1: Int, _ num2: Int) -> String {
//    var array = ArraySlice(myString)
//
//    array.swapAt(num1, num2)
//    return array.map { String($0) }.joined()
//}
//
//
//solution("hello", 1, 2)
//solution("I love you", 3, 6)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//개미 군단
//문제 설명
//개미 군단이 사냥을 나가려고 합니다. 개미군단은 사냥감의 체력에 딱 맞는 병력을 데리고 나가려고 합니다. 장군개미는 5의 공격력을, 병정개미는 3의 공격력을 일개미는 1의 공격력을 가지고 있습니다. 예를 들어 체력 23의 여치를 사냥하려고 할 때, 일개미 23마리를 데리고 가도 되지만, 장군개미 네 마리와 병정개미 한 마리를 데리고 간다면 더 적은 병력으로 사냥할 수 있습니다. 사냥감의 체력 hp가 매개변수로 주어질 때, 사냥감의 체력에 딱 맞게 최소한의 병력을 구성하려면 몇 마리의 개미가 필요한지를 return하도록 solution 함수를 완성해주세요.
//제한사항
//hp는 자연수입니다.
//0 ≤ hp ≤ 1000

//func solution(_ hp:Int) -> Int { hp / 5 + ((hp % 5) / 3) + (((hp % 5) % 3) == 0 ? 0: ((hp % 5) % 3) / 1) }
//func solution(_ hp: Int) -> Int { hp / 5 + hp % 5 / 3 + hp % 5 % 3 }

//solution(23)
//solution(24)
//solution(999)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//7의 개수
//문제 설명
//머쓱이는 행운의 숫자 7을 가장 좋아합니다. 정수 배열 array가 매개변수로 주어질 때, 7이 총 몇 개 있는지 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//1 ≤ array의 길이 ≤ 100
//0 ≤ array의 원소 ≤ 100,000

//import Foundation
//
//func solution(_ array:[Int]) -> Int { array.map { "\($0)" } .map { $0.filter { num in num == "7" }.count}.reduce(0, +) }
//
//func solution(_ array:[Int]) -> Int { array.map{String($0)}.joined().filter{$0 == "7"}.count }
//
//
//solution([7,77,17])
//solution([10, 29])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//직각삼각형 출력하기
//문제 설명
//"*"의 높이와 너비를 1이라고 했을 때, "*"을 이용해 직각 이등변 삼각형을 그리려고합니다. 정수 n 이 주어지면 높이와 너비가 n 인 직각 이등변 삼각형을 출력하도록 코드를 작성해보세요.
//제한사항
//1 ≤ n ≤ 100

//let n = readLine()!.components(separatedBy: [" "]).map { Int($0)! }
//
//(1...n[0]).forEach {
//    print((1...$0).map { _ in "*" }.joined())
//}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//외계행성의 나이
//문제 설명
//우주여행을 하던 머쓱이는 엔진 고장으로 PROGRAMMERS-962 행성에 불시착하게 됐습니다. 입국심사에서 나이를 말해야 하는데, PROGRAMMERS-962 행성에서는 나이를 알파벳으로 말하고 있습니다. a는 0, b는 1, c는 2, ..., j는 9입니다. 예를 들어 23살은 cd, 51살은 fb로 표현합니다. 나이 age가 매개변수로 주어질 때 PROGRAMMER-962식 나이를 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//age는 자연수입니다.
//age ≤ 1,000
//PROGRAMMERS-962 행성은 알파벳 소문자만 사용합니다.

//func solution(_ age:Int) -> String {
//    let alpha = (97...122).map({Character(UnicodeScalar($0))}),
//        charAge = "\(age)".map { alpha[Int(String($0))!] }
//    return String(charAge)
//}

//func solution(_ age:Int) -> String { String(age).reduce("") { $0 + String(UnicodeScalar(97 + Int(String($1))!)!) }}
//
//solution(23)
//solution(51)
//solution(100)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//숫자 찾기
//문제 설명
//정수 num과 k가 매개변수로 주어질 때, num을 이루는 숫자 중에 k가 있으면 num의 그 숫자가 있는 자리 수를 return하고 없으면 -1을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 < num < 1,000,000
//0 ≤ k < 10
//num에 k가 여러 개 있으면 가장 처음 나타나는 자리를 return 합니다.

//func solution(_ num:Int, _ k:Int) -> Int { (String(num).enumerated().filter({ $0.element == Character(String(k)) }).first?.offset ?? -2) + 1 }
//
//solution(29183, 1)
//solution(232443, 4)
//solution(123456, 7)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//가위 바위 보
//문제 설명
//가위는 2 바위는 0 보는 5로 표현합니다. 가위 바위 보를 내는 순서대로 나타낸 문자열 rsp가 매개변수로 주어질 때, rsp에 저장된 가위 바위 보를 모두 이기는 경우를 순서대로 나타낸 문자열을 return하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 < rsp의 길이 ≤ 100
//rsp와 길이가 같은 문자열을 return 합니다.
//rsp는 숫자 0, 2, 5로 이루어져 있습니다. - - -

//func solution(_ rsp:String) -> String {
//    return rsp.map {
//        switch $0 {
//        case "0":
//            return "5"
//        case "2":
//            return "0"
//        case "5":
//            return "2"
//        default: break
//        }
//        return ""
//    }.joined()
//}
//
//solution("2")
//solution("205")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//369게임
//문제 설명
//머쓱이는 친구들과 369게임을 하고 있습니다. 369게임은 1부터 숫자를 하나씩 대며 3, 6, 9가 들어가는 숫자는 숫자 대신 3, 6, 9의 개수만큼 박수를 치는 게임입니다. 머쓱이가 말해야하는 숫자 order가 매개변수로 주어질 때, 머쓱이가 쳐야할 박수 횟수를 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//1 ≤ order ≤ 1,000,000

//func solution(_ order:Int) -> Int { String(order).filter { $0 == "3" || $0 == "6" || $0 == "9" }.count }
//
//solution(3)
//solution(29423)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//순서쌍의 개수
//문제 설명
//순서쌍이란 두 개의 숫자를 순서를 정하여 짝지어 나타낸 쌍으로 (a, b)로 표기합니다. 자연수 n이 매개변수로 주어질 때 두 숫자의 곱이 n인 자연수 순서쌍의 개수를 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ n ≤ 1,000,000

//func solution(_ n:Int) -> Int {
//    var result = 0
//    for i in (1...n) {
//        if n % i == 0 {
//            result += 1
//        }
//    }
//
//    return result
//}
//
//solution(20)
//solution(100)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//암호 해독
//문제 설명
//군 전략가 머쓱이는 전쟁 중 적군이 다음과 같은 암호 체계를 사용한다는 것을 알아냈습니다.
//
//암호화된 문자열 cipher를 주고받습니다.
//그 문자열에서 code의 배수 번째 글자만 진짜 암호입니다.
//문자열 cipher와 정수 code가 매개변수로 주어질 때 해독된 암호 문자열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ cipher의 길이 ≤ 1,000
//1 ≤ code ≤ cipher의 길이
//cipher는 소문자와 공백으로만 구성되어 있습니다.
//공백도 하나의 문자로 취급합니다.

//func solution(_ cipher:String, _ code:Int) -> String { cipher.enumerated().filter { ($0.offset + 1) % code == 0 }.map { String($0.element) }.joined() }
//
//solution("dfjardstddetckdaccccdegk", 4)
//solution("pfqallllabwaoclk", 2)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//중복된 문자 제거
//문제 설명
//문자열 my_string이 매개변수로 주어집니다. my_string에서 중복된 문자를 제거하고 하나의 문자만 남긴 문자열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ my_string ≤ 1,000
//my_string은 대문자, 소문자, 공백으로 구성되어 있습니다.
//대문자와 소문자를 구분합니다.
//공백(" ")도 하나의 문자로 구분합니다.
//중복된 문자 중 가장 앞에 있는 문자를 남깁니다.

//func solution(_ my_string:String) -> String {
//    var tempStr = ""
//    for i in my_string {
//        if !tempStr.contains(i) {
//            tempStr.append(i)
//        }
//    }
//    return tempStr
//}
//
//solution("people")
//solution("We are the world")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//주사위의 개수
//문제 설명
//머쓱이는 직육면체 모양의 상자를 하나 가지고 있는데 이 상자에 정육면체 모양의 주사위를 최대한 많이 채우고 싶습니다. 상자의 가로, 세로, 높이가 저장되어있는 배열 box와 주사위 모서리의 길이 정수 n이 매개변수로 주어졌을 때, 상자에 들어갈 수 있는 주사위의 최대 개수를 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//box의 길이는 3입니다.
//box[0] = 상자의 가로 길이
//box[1] = 상자의 세로 길이
//box[2] = 상자의 높이 길이
//1 ≤ box의 원소 ≤ 100
//1 ≤ n ≤ 50
//n ≤ box의 원소
//주사위는 상자와 평행하게 넣습니다.

//func solution(_ box:[Int], _ n:Int) -> Int { (box[0] / n) * (box[1] / n) * (box[2] / n) }
//
//solution([1, 1, 1], 1)
//solution([10, 8, 6], 3)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//최댓값 만들기 (2)
//문제 설명
//정수 배열 numbers가 매개변수로 주어집니다. numbers의 원소 중 두 개를 곱해 만들 수 있는 최댓값을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//-10,000 ≤ numbers의 원소 ≤ 10,000
//2 ≤ numbers 의 길이 ≤ 100

//func solution(_ numbers:[Int]) -> Int {
//    let plusArray = numbers.filter { $0 >= 0 }.sorted(by: >)
//    let minusArray = numbers.filter { $0 < 0 }.sorted(by: >)
//
//    switch (plusArray.count, minusArray.count) {
//    case (1, 1): return numbers[0] * numbers[1]
//    case (1, 1...): return plusArray[0] * minusArray.last!
//    case (1..., 1): return plusArray[1] * plusArray[0]
//    case (0, _): return minusArray[0] * minusArray[1]
//    case (_, 0): return plusArray[0] * plusArray[1]
//    default: return max(plusArray[0] * plusArray[1], minusArray[0] * minusArray[1])
//    }
//}
//
//func solution(_ numbers:[Int]) -> Int {
//    var numbers = numbers.sorted()
//
//    return max(numbers[0] * numbers[1], numbers[numbers.count-1] * numbers[numbers.count - 2])
//}
//
//solution([1, 2, -3, 4, -5])
//solution([0, -31, 24, 10, 1, 9])
//solution([10, 20, 30, 5, 5, 20, 5])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//2차원으로 만들기
//문제 설명
//정수 배열 num_list와 정수 n이 매개변수로 주어집니다. num_list를 다음 설명과 같이 2차원 배열로 바꿔 return하도록 solution 함수를 완성해주세요.
//
//num_list가 [1, 2, 3, 4, 5, 6, 7, 8] 로 길이가 8이고 n이 2이므로 num_list를 2 * 4 배열로 다음과 같이 변경합니다. 2차원으로 바꿀 때에는 num_list의 원소들을 앞에서부터 n개씩 나눠 2차원 배열로 변경합니다.
//제한사항
//num_list의 길이는 n의 배 수개입니다.
//0 ≤ num_list의 길이 ≤ 1000
//2 ≤ n < num_list의 길이

//func solution(_ num_list:[Int], _ n:Int) -> [[Int]] {
//    var tempArray = [[Int]](repeating: [Int](repeating: 0, count: n), count: num_list.count / n)
//
//    for i in (0..<num_list.count) {
//        tempArray[i / n][i % n] = num_list[i]
//    }
//    return tempArray
//}
//
//solution([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [
//solution([100, 95, 2, 4, 5, 6, 18, 33, 948], 3)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//배열 회전시키기
//문제 설명
//정수가 담긴 배열 numbers와 문자열 direction가 매개변수로 주어집니다. 배열 numbers의 원소를 direction방향으로 한 칸씩 회전시킨 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ numbers의 길이 ≤ 100
//direction은 "left" 와 "right" 둘 중 하나입니다.

//func solution(_ numbers:[Int], _ direction:String) -> [Int] {
//    var tempArr = numbers
//    switch direction {
//    case "right":
//        tempArr.insert(numbers.last!, at: 0)
//        return tempArr.dropLast()
//    case "left":
//        tempArr.append(numbers.first!)
//        return Array(tempArr.dropFirst())
//    default: return []
//    }
//}
//
//solution([1, 2, 3], "right")
//solution([4, 455, 6, 4, -1, 45, 6], "left")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//피자 나눠 먹기 (2)
//문제 설명
//머쓱이네 피자가게는 피자를 여섯 조각으로 잘라 줍니다. 피자를 나눠먹을 사람의 수 n이 매개변수로 주어질 때, n명이 주문한 피자를 남기지 않고 모두 같은 수의 피자 조각을 먹어야 한다면 최소 몇 판을 시켜야 하는지를 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//1 ≤ n ≤ 100
//func solution(_ n:Int) -> Int {
//    var min = 1
//
//    while (min * n) % 6 != 0 {
//        min += 1
//    }
//    return (min * n) / 6
//}
//
//solution(6)
//solution(10)
//solution(4)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//A로 B 만들기
//문제 설명
//문자열 before와 after가 매개변수로 주어질 때, before의 순서를 바꾸어 after를 만들 수 있으면 1을, 만들 수 없으면 0을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 < before의 길이 == after의 길이 < 1,000
//before와 after는 모두 소문자로 이루어져 있습니다.

//func solution(_ before:String, _ after:String) -> Int { return Dictionary(grouping: before) { $0 } == Dictionary(grouping: after) { $0 } ? 1: 0 }
//
//solution("olleh", "hello")
//solution("allpe", "apple")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//합성수 찾기
//문제 설명
//약수의 개수가 세 개 이상인 수를 합성수라고 합니다. 자연수 n이 매개변수로 주어질 때 n이하의 합성수의 개수를 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ n ≤ 100

//func solution(_ n:Int) -> Int {
//    var temDic: [Int: Int] = [:]
//    for i in 1...n {
//        for j in 1...i {
//            if i % j == 0 {
//                temDic.updateValue((temDic[i] ?? 0) + 1, forKey: i)
//            }
//        }
//    }
//    return temDic.values.filter({ $0 >= 3 }).count
//}
//
//solution(10)
//solution(15)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//k의 개수
//문제 설명
//1부터 13까지의 수에서, 1은 1, 10, 11, 12, 13 이렇게 총 6번 등장합니다. 정수 i, j, k가 매개변수로 주어질 때, i부터 j까지 k가 몇 번 등장하는지 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ i < j ≤ 100,000
//0 ≤ k ≤ 9

//func solution(_ i:Int, _ j:Int, _ k:Int) -> Int {
//    var result = 0
//    for index in i...j {
//        for strIndex in String(index) {
//            if strIndex == Character(String(k)) {
//                result += 1
//            }
//        }
//    }
//
//    return result
//}
//
//solution(1, 13, 1)
//solution(10, 50, 5)
//solution(3, 10, 2)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//잘라서 배열로 저장하기
//문제 설명
//문자열 my_str과 n이 매개변수로 주어질 때, my_str을 길이 n씩 잘라서 저장한 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ my_str의 길이 ≤ 100
//1 ≤ n ≤ my_str의 길이
//my_str은 알파벳 소문자, 대문자, 숫자로 이루어져 있습니다.

//func solution(_ my_str:String, _ n:Int) -> [String] {
//    var resultArray: [String] = []
//    var resultString: String = ""
//
//    for i in my_str.enumerated() {
//        resultString += String(i.element)
//        if i.offset % n + 1 == n || i.offset + 1 == my_str.count {
//            resultArray.append(resultString)
//            resultString = ""
//        }
//    }
//    return resultArray
//}
//
//solution("abc1Addfggg4556b", 6)
//solution("abcdef123", 3)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//팩토리얼
//i팩토리얼 (i!)은 1부터 i까지 정수의 곱을 의미합니다. 예를들어 5! = 5 * 4 * 3 * 2 * 1 = 120 입니다. 정수 n이 주어질 때 다음 조건을 만족하는 가장 큰 정수 i를 return 하도록 solution 함수를 완성해주세요.
//
//i! ≤ n
//제한사항
//0 < n ≤ 3,628,800

//func solution(_ n:Int) -> Int {
//    var result = n
//    var count = 1
//    while result != 0  {
//        count += 1
//        result /= count
//    }
//    return count - 1
//}
//
//solution(3628800)
//solution(7)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//모스부호 (1)
//문제 설명
//머쓱이는 친구에게 모스부호를 이용한 편지를 받았습니다. 그냥은 읽을 수 없어 이를 해독하는 프로그램을 만들려고 합니다. 문자열 letter가 매개변수로 주어질 때, letter를 영어 소문자로 바꾼 문자열을 return 하도록 solution 함수를 완성해보세요.
//모스부호는 다음과 같습니다.
//
//morse = {
//    '.-':'a','-...':'b','-.-.':'c','-..':'d','.':'e','..-.':'f',
//    '--.':'g','....':'h','..':'i','.---':'j','-.-':'k','.-..':'l',
//    '--':'m','-.':'n','---':'o','.--.':'p','--.-':'q','.-.':'r',
//    '...':'s','-':'t','..-':'u','...-':'v','.--':'w','-..-':'x',
//    '-.--':'y','--..':'z'
//}
//제한사항
//1 ≤ letter의 길이 ≤ 1,000
//return값은 소문자입니다.
//letter의 모스부호는 공백으로 나누어져 있습니다.
//letter에 공백은 연속으로 두 개 이상 존재하지 않습니다.
//해독할 수 없는 편지는 주어지지 않습니다.
//편지의 시작과 끝에는 공백이 없습니다

//func solution(_ letter:String) -> String {
//    let morse: [String: String] = [".-":"a","-...":"b","-.-.":"c","-..":"d",".":"e","..-.":"f",
//    "--.":"g","....":"h","..":"i",".---":"j","-.-":"k",".-..":"l",
//    "--":"m","-.":"n","---":"o",".--.":"p","--.-":"q",".-.":"r",
//    "...":"s","-":"t","..-":"u","...-":"v",".--":"w","-..-":"x",
//    "-.--":"y","--..":"z"]
//
//    return letter.components(separatedBy: " ").map({ morse[$0]! }).joined()
//}
//
//solution(".... . .-.. .-.. ---")
//solution(".--. -.-- - .... --- -.")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//한 번만 등장한 문자
//문제 설명
//문자열 s가 매개변수로 주어집니다. s에서 한 번만 등장하는 문자를 사전 순으로 정렬한 문자열을 return 하도록 solution 함수를 완성해보세요. 한 번만 등장하는 문자가 없을 경우 빈 문자열을 return 합니다.
//
//제한사항
//0 < s의 길이 < 1,000
//s는 소문자로만 이루어져 있습니다.

//func solution(_ s:String) -> String { String(Dictionary(grouping: s) { $0 }.values.filter { $0.count == 1 }.joined().sorted()) }
//
//solution("abcabcadc")
//solution("abdc")
//solution("hello")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//가까운 수
//문제 설명
//정수 배열 array와 정수 n이 매개변수로 주어질 때, array에 들어있는 정수 중 n과 가장 가까운 수를 return 하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ array의 길이 ≤ 100
//1 ≤ array의 원소 ≤ 100
//1 ≤ n ≤ 100
//가장 가까운 수가 여러 개일 경우 더 작은 수를 return 합니다.

//func solution(_ array:[Int], _ n:Int) -> Int {
//    guard array.count > 1 else { return array[0]}
//    let sortedArray = array.sorted { abs($0 - n) < abs($1 - n) }
//
//    return abs(sortedArray[0] - n) == abs(sortedArray[1] - n) ? min(sortedArray[0], sortedArray[1]): sortedArray[0]
//}
//
//func solution(_ array:[Int], _ n:Int) -> Int {
//    return array.min(by: { (abs($0 - n), $0) < (abs($1 - n), $1) })!
//}
//
//solution([3, 10, 28], 20)
//solution([10, 11, 12], 13)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//다음에 올 숫자
//문제 설명
//등차수열 혹은 등비수열 common이 매개변수로 주어질 때, 마지막 원소 다음으로 올 숫자를 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//2 < common의 길이 < 1,000
//-1,000 < common의 원소 < 2,000
//등차수열 혹은 등비수열이 아닌 경우는 없습니다.
//공비가 0인 경우는 없습니다.

//func solution(_ common:[Int]) -> Int {
//    if common[0] - common[1] == common[1] - common [2] {
//        return common.last! + common[1] - common[0]
//    } else {
//        return common.last! * common[1] / common[0]
//    }
//}
//
//solution([1, 2 ,3, 4])
//solution([2, 4, 8])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//특이한 정렬
//문제 설명
//정수 n을 기준으로 n과 가까운 수부터 정렬하려고 합니다. 이때 n으로부터의 거리가 같다면 더 큰 수를 앞에 오도록 배치합니다. 정수가 담긴 배열 numlist와 정수 n이 주어질 때 numlist의 원소를 n으로부터 가까운 순서대로 정렬한 배열을 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//1 ≤ n ≤ 10,000
//1 ≤ numlist의 원소 ≤ 10,000
//1 ≤ numlist의 길이 ≤ 100
//numlist는 중복된 원소를 갖지 않습니다.

//func solution(_ numlist:[Int], _ n:Int) -> [Int] { numlist.sorted(by: >).sorted { abs($0 - n) < abs($1 - n) } }
//
//solution([1, 2, 3, 4, 5, 6], 4)
//solution([10000,20,36,47,40,6,10,7000], 30)
//solution([5, 6, 4, 3, 7, 8, 9, 2, 1], 5)
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//컨트롤 제트
//문제 설명
//숫자들이 공백으로 구분된 문자열이 주어집니다. 문자열에 있는 숫자를 차례대로 더하려고 합니다. 이 때 “Z”가 나오면 바로 전에 더했던 숫자를 뺀다는 뜻입니다. 숫자와 “Z”로 이루어진 문자열 s가 주어질 때, 머쓱이가 구한 값을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 < s의 길이 < 1,000
//-1,000 < s의 원소 중 숫자 < 1,000
//s는 숫자, "Z", 공백으로 이루어져 있습니다.
//s에 있는 숫자와 "Z"는 서로 공백으로 구분됩니다.
//연속된 공백은 주어지지 않습니다.
//0을 제외하고는 0으로 시작하는 숫자는 없습니다.
//s의 시작과 끝에는 공백이 없습니다.
//모든 숫자를 지우는 경우는 주어지지 않습니다.
//지울 숫자가 없는 상태에서 "Z"는 무시합니다.

//func solution(_ s:String) -> Int {
//    var tempArr = s.components(separatedBy: " ")
//    var cnt = 0
//
//    for i in tempArr.enumerated() {
//        if i.element == "Z" {
//            tempArr.removeSubrange((i.offset - cnt - 1)...(i.offset - cnt))
//            cnt += 2
//        }
//    }
//
//    return tempArr.reduce(0) { $0 + Int($1)! }
//}
//
//func solution(_ s: String) -> Int {
//    var stack = [Int]()
//
//    for w in s.components(separatedBy: [" "]) {
//        if w == "Z" {
//            stack.popLast()
//        } else {
//            stack.append(Int(w)!)
//        }
//    }
//    return stack.reduce(0, +)
//}
//
//solution("1 2 Z 3")
//solution("10 20 30 40")
//solution("10 Z 20 Z 1")
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//외계어 사전
//문제 설명
//PROGRAMMERS-962 행성에 불시착한 우주비행사 머쓱이는 외계행성의 언어를 공부하려고 합니다. 알파벳이 담긴 배열 spell과 외계어 사전 dic이 매개변수로 주어집니다. spell에 담긴 알파벳을 한번씩만 모두 사용한 단어가 dic에 존재한다면 1, 존재하지 않는다면 2를 return하도록 solution 함수를 완성해주세요.
//
//제한사항
//spell과 dic의 원소는 알파벳 소문자로만 이루어져있습니다.
//2 ≤ spell의 크기 ≤ 10
//spell의 원소의 길이는 1입니다.
//1 ≤ dic의 크기 ≤ 10
//1 ≤ dic의 원소의 길이 ≤ 10
//spell의 원소를 모두 사용해 단어를 만들어야 합니다.
//spell의 원소를 모두 사용해 만들 수 있는 단어는 dic에 두 개 이상 존재하지 않습니다.
//dic과 spell 모두 중복된 원소를 갖지 않습니다

//func solution(_ spell:[String], _ dic:[String]) -> Int { dic.filter { Set($0) == Set(spell.map { Character($0) }) }.isEmpty ? 2 : 1 }
//
//solution(["p", "o", "s"], ["sod", "eocd", "qixm", "adio", "soo"])
//solution(["z", "d", "x"], ["def", "dww", "dzx", "loveaw"])
//solution(["s", "o", "m", "d"], ["moos", "dzx", "smm", "sunmmo", "som"])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//평행
//문제 설명
//점 네 개의 좌표를 담은 이차원 배열  dots가 다음과 같이 매개변수로 주어집니다.
//
//[[x1, y1], [x2, y2], [x3, y3], [x4, y4]]
//주어진 네 개의 점을 두 개씩 이었을 때, 두 직선이 평행이 되는 경우가 있으면 1을 없으면 0을 return 하도록 solution 함수를 완성해보세요.
//
//제한사항
//0 ≤ dots의 원소 ≤ 100
//dots의 길이 = 4
//dots의 원소의 길이 = 2
//dots의 원소는 [x, y] 형태이며 x, y는 정수입니다.
//서로 다른 두개 이상의 점이 겹치는 경우는 없습니다.
//두 직선이 겹치는 경우(일치하는 경우)에도 1을 return 해주세요.

//func solution(_ dots:[[Int]]) -> Int { getInclination(dots[0], dots[1]) == getInclination(dots[2], dots[3]) || getInclination(dots[0], dots[2]) == getInclination(dots[1], dots[3]) || getInclination(dots[0], dots[3]) == getInclination(dots[1], dots[2]) ? 1 : 0 }
//
//private func getInclination(_ dot1: [Int], _ dot2: [Int]) -> Double { Double(dot1[1] - dot2[1]) / Double(dot1[0] - dot2[0]) }
//
//solution([[1, 4], [9, 2], [3, 8], [10, 4]])
//solution([[3, 5], [4, 1], [2, 4], [5, 10]])
//solution([[0, 3], [0, 5], [0, 6], [0, 8] ])
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//저주의 숫자 3
//문제 설명
//3x 마을 사람들은 3을 저주의 숫자라고 생각하기 때문에 3의 배수와 숫자 3을 사용하지 않습니다. 3x 마을 사람들의 숫자는 다음과 같습니다.
//
//10진법    3x 마을에서 쓰는 숫자    10진법    3x 마을에서 쓰는 숫자
//1    1    6    8
//2    2    7    10
//3    4    8    11
//4    5    9    14
//5    7    10    16
//정수 n이 매개변수로 주어질 때, n을 3x 마을에서 사용하는 숫자로 바꿔 return하도록 solution 함수를 완성해주세요.

func solution(_ n:Int) -> Int {
    var result = 0
    (1...n).forEach { _ in 
        result += 1
        while String(result).contains("3") || result % 3 == 0 {
            result += 1
        }
    }
    
    return result
}

solution(8)
solution(15)
solution(40)
